CREATE DATABASE loan_management_system ENCODING 'UTF-8';

CREATE SCHEMA IF NOT EXISTS public;

CREATE TYPE ADDRESS AS (
    STREET_NAME VARCHAR(255),
    POSTCODE VARCHAR(15),
    CITY VARCHAR(50),
    COUNTRY VARCHAR(50)
);

CREATE TABLE COMPANY (
  ID SERIAL PRIMARY KEY,
  NAME VARCHAR(255) NOT NULL,
  LICENSE_NUMBER VARCHAR(100) NOT NULL UNIQUE,
  EMAIL VARCHAR(50) NOT NULL UNIQUE,
  ESTABLISHMENT_DATE DATE NOT NULL
);

CREATE TABLE COMPANY_OFFICE_ADDRESS (
  COMP_ID SERIAL NOT NULL,
  STREET_NAME VARCHAR(255) NOT NULL,
  CITY VARCHAR(50) NOT NULL,
  COUNTRY VARCHAR(50) NOT NULL,
  POSTCODE VARCHAR(15) NOT NULL,
  PRIMARY KEY (COMP_ID, STREET_NAME, POSTCODE),
  CONSTRAINT COMPANY_FK FOREIGN KEY (COMP_ID) REFERENCES COMPANY(ID)
);

CREATE TABLE SYS_USER ( -- TABLE USER as USER is a reserved keyword in postgres
    ID SERIAL PRIMARY KEY,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    SSN VARCHAR(30) NOT NULL UNIQUE,
    EMAIL VARCHAR(50) NOT NULL UNIQUE,
    PHONE_NUMBER VARCHAR(20) NOT NULL UNIQUE,
    DATE_OF_BIRTH DATE NOT NULL,
    COMP_ID SERIAL,
    CONSTRAINT COMPANY_FK FOREIGN KEY (COMP_ID) REFERENCES COMPANY (ID)
);

CREATE TABLE BORROWER (
    ID SERIAL REFERENCES SYS_USER(ID),
    ADDRESS ADDRESS NOT NULL,
    PHOTO_ID VARCHAR(255) NOT NULL,
    KYC_COMPLETED BIT(1) NOT NULL DEFAULT '0',
    BANK_ACCOUNT_NUMBER VARCHAR(20),
    BANK_SORT_CODE VARCHAR(20),
    PRIMARY KEY (ID)
);

CREATE TABLE COMPANY_OFFICIAL (
    ID SERIAL REFERENCES SYS_USER(ID),
    ROLE CHAR(20) CHECK (ROLE IN ('ADMIN', 'SUPERVISOR', 'MARKETER')),
    SUPERVISOR_ID BIGSERIAL,
    CONSTRAINT SUPERVISOR_FK FOREIGN KEY (SUPERVISOR_ID) REFERENCES COMPANY_OFFICIAL(ID),
    PRIMARY KEY (ID)
);
-- CREATE OR REPLACE TYPE  ();

CREATE TABLE LOAN_PACKAGE (
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(255) NOT NULL,
    INTEREST_RATE NUMERIC NOT NULL,
    COMP_ID SERIAL,
    FLAG CHAR(20) NOT NULL CHECK ( FLAG IN ('ENABLED', 'DISABLED')),
    CONSTRAINT COMPANY_FK FOREIGN KEY (COMP_ID) REFERENCES COMPANY (ID)
);

CREATE TABLE LOAN_APPLICATION (
    ID SERIAL PRIMARY KEY,
    APPLICATION_NO SERIAL NOT NULL,
    AMOUNT NUMERIC NOT NULL,
    INTEREST_RATE NUMERIC NOT NULL,
    DATE_CREATED DATE NOT NULL DEFAULT CURRENT_DATE,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    BORROWER_ID SERIAL NOT NULL,
    LOAN_PACKAGE_ID SERIAL NOT NULL,
    COMP_ID SERIAL NOT NULL ,
    STATUS CHAR(20) NOT NULL CHECK ( STATUS IN ('PENDING', 'APPROVED', 'REJECTED')),
    CONSTRAINT COMPANY_FK FOREIGN KEY (COMP_ID) REFERENCES COMPANY (ID),
    CONSTRAINT BORROWER_FK FOREIGN KEY (BORROWER_ID) REFERENCES BORROWER (ID),
    CONSTRAINT LOAN_PACKAGE_FK FOREIGN KEY (LOAN_PACKAGE_ID) REFERENCES LOAN_PACKAGE (ID)
);

CREATE TABLE APPROVAL_GROUP (
    ID SERIAL PRIMARY KEY,
    GROUP_NAME VARCHAR(255) NOT NULL,
    COMP_ID SERIAL,
    LOAN_PACKAGE_ID SERIAL NOT NULL,
    CONSTRAINT COMPANY_FK FOREIGN KEY (COMP_ID) REFERENCES COMPANY (ID),
    CONSTRAINT LOAN_PACKAGE_FK FOREIGN KEY (LOAN_PACKAGE_ID) REFERENCES LOAN_PACKAGE (ID)
);


CREATE TABLE APPROVAL_USER_GROUP (
    ID SERIAL PRIMARY KEY,
    GROUP_ID SERIAL,
    COMPANY_OFFICIAL_ID SERIAL,
    CONSTRAINT COMPANY_FK FOREIGN KEY (COMPANY_OFFICIAL_ID) REFERENCES COMPANY_OFFICIAL (ID),
    CONSTRAINT APPROVAL_GROUP_FK FOREIGN KEY (GROUP_ID) REFERENCES APPROVAL_GROUP (ID)
);

CREATE TABLE LOAN_APPROVAL (
    ID SERIAL PRIMARY KEY,
    COMMENTS VARCHAR(512),
    APPROVAL_GROUP_ID SERIAL NOT NULL,
    LOAN_APPLICATION_ID SERIAL NOT NULL,
    APPROVAL_STATUS CHAR(20) NOT NULL CHECK ( APPROVAL_STATUS IN ('PENDING', 'APPROVED', 'REJECTED')),
    CONSTRAINT APPROVAL_GROUP_FK FOREIGN KEY (APPROVAL_GROUP_ID) REFERENCES APPROVAL_GROUP (ID),
    CONSTRAINT LOAN_APPLICATION_FK FOREIGN KEY (LOAN_APPLICATION_ID) REFERENCES LOAN_APPLICATION (ID)
);

CREATE TABLE LOAN (
    ID SERIAL PRIMARY KEY,
    LOAN_APPLICATION_ID SERIAL NOT NULL,
    BORROWER_ID SERIAL NOT NULL,
    PRINCIPAL_AMOUNT NUMERIC NOT NULL,
    TOTAL_PAYABLE NUMERIC NOT NULL,
    INTEREST_RATE NUMERIC NOT NULL,
    DATE_CREATED DATE NOT NULL DEFAULT CURRENT_DATE,
    START_DATE DATE NOT NULL,
    END_DATE DATE,
    KYC_COMPLETED BIT(1) NOT NULL DEFAULT '0',
    STATUS CHAR(20) NOT NULL CHECK ( STATUS IN ('PENDING_DISBURSEMENT', 'DISBURSED', 'REPAID')),
    CONSTRAINT BORROWER_FK FOREIGN KEY (BORROWER_ID) REFERENCES BORROWER (ID),
    CONSTRAINT LOAN_APPLICATION_FK FOREIGN KEY (LOAN_APPLICATION_ID) REFERENCES LOAN_APPLICATION (ID)
);

CREATE TABLE LOAN_DISBURSEMENT (
    ID SERIAL PRIMARY KEY,
    LOAN_ID SERIAL NOT NULL,
    BORROWER_ID SERIAL NOT NULL,
    DATE_CREATED DATE NOT NULL DEFAULT CURRENT_DATE,
    BANK_ACCOUNT_NUMBER VARCHAR(20) NOT NULL,
    BANK_SORT_CODE VARCHAR(20) NOT NULL,
    CONSTRAINT BORROWER_FK FOREIGN KEY (BORROWER_ID) REFERENCES BORROWER (ID),
    CONSTRAINT LOAN_FK FOREIGN KEY (LOAN_ID) REFERENCES LOAN (ID)
);


CREATE TABLE LOAN_REPAYMENT (
    ID SERIAL PRIMARY KEY,
    LOAN_ID SERIAL NOT NULL,
    BORROWER_ID SERIAL NOT NULL,
    PAYMENT_DATE DATE NOT NULL,
    AMOUNT NUMERIC NOT NULL,
    CONSTRAINT BORROWER_FK FOREIGN KEY (BORROWER_ID) REFERENCES BORROWER (ID),
    CONSTRAINT LOAN_FK FOREIGN KEY (LOAN_ID) REFERENCES LOAN (ID)
);

--  CREATE TRIGGER FOR LOAN_APPROVAL


-- CREATE TRIGGER employees_insert_trigger
-- AFTER INSERT ON employees
-- FOR EACH ROW
-- BEGIN
--   INSERT INTO people (id, name)
--   VALUES (NEW.id, NEW.name);
-- END;
